AWSTemplateFormatVersion: "2010-09-09"

Description: "Infrastructure for the academic friends project"

Parameters:
  UserName:
    Type: String
    MinLength: 6
    MaxLength: 20
    Description: New account username
  UserPassword:
    NoEcho: "true"
    Type: String
    Description: New account password
    MinLength: 8
    MaxLength: 20
  DBPassword:
    NoEcho: "true"
    Type: String
    Description: database password
    MinLength: 8
    MaxLength: 20
  VPC:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID
  SecretKey:
    NoEcho: "true"
    Type: String
    Description: Secret key for the application
    MinLength: 8
  DeployEcsService:
    Type: String
    Default: "false"
    AllowedValues: [ "true", "false" ]
    Description: Deploy ECS service
  ContainerImage:
    Type: String
    Description: Container image
    MinLength: 1
    MaxLength: 255
    Default: "s8vega/af-image"
  Subnet:
    Type: AWS::EC2::Subnet::Id
    Description: Subnet ID

Conditions:
  DeployEcsServiceCondition: !Equals [ !Ref DeployEcsService, "true" ]

Resources:
  AdminGroup:
    Type: AWS::IAM::Group
  AdminPolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: AdminPolicy
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action: [ "*" ]
          Resource: "*"
      Groups: [ !Ref "AdminGroup" ]
  User:
    Type: AWS::IAM::User
    Properties:
      UserName: !Ref UserName
      LoginProfile:
        Password: !Ref UserPassword
      Groups: [ !Ref AdminGroup ]
  Keys:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref "User"
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: academic-friends-cognito
      UsernameAttributes:
      - email
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
      AutoVerifiedAttributes: [ ]
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      Schema:
      - Name: role
        Required: false
        Mutable: true
        AttributeDataType: String
      AccountRecoverySetting:
        RecoveryMechanisms:
        - Name: verified_email
          Priority: 1
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: academic-friends-app-client
      UserPoolId: !Ref UserPool
      ExplicitAuthFlows:
      - ALLOW_REFRESH_TOKEN_AUTH
      - ALLOW_USER_PASSWORD_AUTH
  MyBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: academic-friends-bucket
  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "academic-friends-security-group"
      GroupDescription: Allow all traffic
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: -1
      SecurityGroupEgress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: -1
  MyDB:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20
      DBInstanceClass: db.t3.micro
      Engine: postgres
      EngineVersion: 15.4
      MasterUsername: postgres
      MasterUserPassword: !Ref DBPassword
      DBInstanceIdentifier: academic-friends-db-id
      PubliclyAccessible: true
      VPCSecurityGroups:
      - !GetAtt MySecurityGroup.GroupId
      DBName: academic_friends_db_rds
  MyECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: academic-friends-cluster
      CapacityProviders:
      - FARGATE
      - FARGATE_SPOT
  MyTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: academic-friends-family-task
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
      Memory: 3072
      Cpu: 1024
      ContainerDefinitions:
      - Name: academic-friends-container
        Image: !Ref ContainerImage
        PortMappings:
        - Name: "af-container-port"
          ContainerPort: 8080
          HostPort: 8080
          Protocol: tcp
          AppProtocol: http
        Essential: true
        LinuxParameters:
          Capabilities:
            Add:
            - SYS_PTRACE
        Environment:
        - Name: "datasource_url"
          Value: !Join [ "", [ "jdbc:postgresql://", !GetAtt [ MyDB, Endpoint.Address ], ":", !GetAtt [ MyDB, Endpoint.Port ] ,"/", !GetAtt [ MyDB, DBName ] ] ]
        - Name: "datasource_username"
          Value: !GetAtt [ MyDB, MasterUsername ]
        - Name: "datasource_password"
          Value: !Ref DBPassword
        - Name: "aws_access_key_id"
          Value: !Ref "Keys"
        - Name: "aws_secret_access_key"
          Value: !GetAtt [ Keys, SecretAccessKey ]
        - Name: "cognito_user_pool_id"
          Value: !Ref "UserPool"
        - Name: "cognito_client_id"
          Value: !Ref "UserPoolClient"
        - Name: "academic-friends-bucket"
          Value: !Ref "MyBucket"
        - Name: "env"
          Value: "local"
        - Name: "secret_key"
          Value: !Ref SecretKey
  MyService:
    Type: AWS::ECS::Service
    Condition: DeployEcsServiceCondition
    Properties:
      Cluster: !Ref MyECSCluster
      ServiceName: academic-friends-service
      DesiredCount: 1
      TaskDefinition: !Ref MyTaskDefinition
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
          - !GetAtt MySecurityGroup.GroupId
          Subnets:
          - !Ref Subnet

Outputs:
  AwsAccessKey:
    Value: !Ref "Keys"
    Description: AWSAccessKeyId of new user
  AwsSecretAccessKey:
    Value: !GetAtt [ Keys, SecretAccessKey ]
    Description: AWSSecretAccessKey of new user
  CognitoUserPoolId:
    Value: !Ref "UserPool"
    Description: UserPoolId of cognito
  CognitoClientId:
    Value: !Ref "UserPoolClient"
    Description: UserPoolClientId of cognito
  DataSourceHost:
    Value: !GetAtt [ MyDB, Endpoint.Address ]
    Description: Endpoint of the database
  DataSourcePort:
    Value: !GetAtt [ MyDB, Endpoint.Port ]
    Description: Port of the database
  DataSourceName:
    Value: !GetAtt [ MyDB, DBName ]
    Description: Database name
  DataSourceUsername:
    Value: !GetAtt [ MyDB, MasterUsername ]
    Description: Database username
  DataSourcePassword:
    Value: !Ref "DBPassword"
    Description: Database password