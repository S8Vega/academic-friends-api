AWSTemplateFormatVersion: "2010-09-09"

Description: "Infrastructure for the academic friends project"

Parameters:
  UserName:
    Type: String
    MinLength: 6
    MaxLength: 20
    Description: New account username
  UserPassword:
    NoEcho: "true"
    Type: String
    Description: New account password
    MinLength: 8
    MaxLength: 20
  DBPassword:
    NoEcho: "true"
    Type: String
    Description: database password
    MinLength: 8
    MaxLength: 20
  VPC:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID

Resources:
  AdminGroup:
    Type: AWS::IAM::Group
  AdminPolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: AdminPolicy
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action: [ "*" ]
          Resource: "*"
      Groups: [ !Ref "AdminGroup" ]
  User:
    Type: AWS::IAM::User
    Properties:
      UserName: !Ref UserName
      LoginProfile:
        Password: !Ref UserPassword
      Groups: [ !Ref AdminGroup ]
  Keys:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref "User"
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: academic-friends-cognito
      UsernameAttributes:
      - email
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
      AutoVerifiedAttributes: [ ]
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      Schema:
      - Name: role
        Required: false
        Mutable: true
        AttributeDataType: String
      AccountRecoverySetting:
        RecoveryMechanisms:
        - Name: verified_email
          Priority: 1
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: academic-friends-app-client
      UserPoolId: !Ref UserPool
      ExplicitAuthFlows:
      - ALLOW_REFRESH_TOKEN_AUTH
      - ALLOW_USER_PASSWORD_AUTH
  MyBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: academic-friends-bucket
  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "academic-friends-security-group"
      GroupDescription: Allow all traffic
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: -1
      SecurityGroupEgress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: -1
  MyDB:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20
      DBInstanceClass: db.t3.micro
      Engine: postgres
      EngineVersion: 15.4
      MasterUsername: postgres
      MasterUserPassword: !Ref DBPassword
      DBInstanceIdentifier: academic-friends-db-id
      PubliclyAccessible: true
      VPCSecurityGroups:
      - !GetAtt MySecurityGroup.GroupId
      DBName: academic_friends_db_rds

Outputs:
  AccessKey:
    Value: !Ref "Keys"
    Description: AWSAccessKeyId of new user
  SecretKey:
    Value: !GetAtt [ Keys, SecretAccessKey ]
    Description: AWSSecretAccessKey of new user
  UserPoolId:
    Value: !Ref "UserPool"
    Description: UserPoolId of new user
  UserPoolClientId:
    Value: !Ref "UserPoolClient"
    Description: UserPoolClientId of new user
  DBEndpoint:
    Value: !GetAtt [ MyDB, Endpoint.Address ]
    Description: DBEndpoint of new user
  DBPort:
    Value: !GetAtt [ MyDB, Endpoint.Port ]
    Description: DBPort of new user
  DBName:
    Value: !GetAtt [ MyDB, DBName ]
    Description: DBName of new user
  DBUsername:
    Value: !GetAtt [ MyDB, MasterUsername ]
    Description: DBUsername of new user
  DBPassword:
    Value: !Ref "DBPassword"
    Description: DBPassword of new user